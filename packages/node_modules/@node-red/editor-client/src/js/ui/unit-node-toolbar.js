RED.unitNodeToolbar = (function() {
    function init() {
        // Create the unit node button as a list item
        var unitNodeButtonLi = $('<li><span class="button-group">'+
            '<a id="red-ui-header-button-unit-node" class="red-ui-deploy-button" href="#" title="Unit Node">'+
            '<span class="red-ui-deploy-button-content">'+
            '<span>Add Node</span>'+
            '</span>'+
            '</a>'+
            '</span></li>');
        
        // Apply styling immediately
        unitNodeButtonLi.find("#red-ui-header-button-unit-node").css({
            "background": "red",
            "color": "#fff",
            "width": "120px",
            "align-items": "center",
            "justify-content": "center",
            "text-align": "center"
        }).hover(
            function() { $(this).css("background", "#cc0000"); },
            function() { $(this).css("background", "red"); }
        );

        // Delay the DOM insertion slightly to ensure the deploy button exists
        setTimeout(function() {
            // Target the deploy button specifically by its ID
            var deployButton = $("#red-ui-header-button-deploy");
            
            if (deployButton.length > 0) {
                // Find the parent list item (li) of the deploy button
                var deployButtonLi = deployButton.closest("li");
                
                if (deployButtonLi.length > 0) {
                    // Insert the new unit node list item *before* the deploy button's list item
                    unitNodeButtonLi.insertBefore(deployButtonLi);
                    console.log("Unit node button inserted before deploy button's li (delayed).");
                } else {
                    // Fallback if the parent li couldn't be found
                    $(".red-ui-header-toolbar").prepend(unitNodeButtonLi);
                    console.warn("Could not find deploy button's li, prepending unit node button (delayed).");
                }
            } else {
                // Fallback if the deploy button element itself isn't found
                 $(".red-ui-header-toolbar").prepend(unitNodeButtonLi);
                console.warn("Could not find deploy button element, prepending unit node button (delayed).");
            }
        }, 100); // Delay by 100 milliseconds


        // Create the draggable node that users can drag from the header
        var unitNodeDrag = $('<div class="red-ui-palette-node"></div>')
            .attr("data-palette-type", "unit-node")
            .css({
                "display": "none",  // Hidden by default
                "position": "absolute",
                "top": 0,
                "left": 0,
                "background-color": "#a6bbcf",
                "width": "100px",
                "height": "25px",
                "border-radius": "5px",
                "border": "1px solid #999",
                "z-index": "1000"
            });
        
        // Add label to the draggable node
        $('<div class="red-ui-palette-label"></div>')
            .text("unit-node")
            .css({
                "display": "block",
                "text-align": "center",
                "font-size": "12px",
                "line-height": "25px"
            })
            .appendTo(unitNodeDrag);
        
        // Add ports to the draggable node
        $('<div class="red-ui-palette-port red-ui-palette-port-input"></div>')
            .css({
                "top": "12px",
                "left": "0px"
            })
            .appendTo(unitNodeDrag);
        
        $('<div class="red-ui-palette-port red-ui-palette-port-output"></div>')
            .css({
                "top": "12px",
                "right": "0px"
            })
            .appendTo(unitNodeDrag);
        
        // Append the draggable node to the body
        unitNodeDrag.appendTo("body");
        
        // Make the unit node draggable by matching the pattern in palette.js
        unitNodeDrag.draggable({
            helper: 'clone',
            appendTo: '#red-ui-editor',
            revert: 'invalid',
            revertDuration: 200,
            containment: '#red-ui-main-container',
            start: function() {
                var dropEnabled = !(RED.nodes.workspace(RED.workspaces.active())?.locked);
                if (!dropEnabled) return false;
                
                var activeGroup = RED.view.getActiveGroup();
                if (activeGroup) {
                    document.getElementById("group_select_"+activeGroup.id).classList.add("red-ui-flow-group-active-hovered");
                }
                RED.view.focus();
            },
            stop: function() {
                var activeGroup = RED.view.getActiveGroup();
                if (activeGroup) {
                    document.getElementById("group_select_"+activeGroup.id).classList.remove("red-ui-flow-group-active-hovered");
                }
            }
        });
        
        // Track mouse position for creating the node
        var mousePos = {};
        $(document).mousemove(function(e) {
            mousePos.x = e.pageX;
            mousePos.y = e.pageY;
        });
        
        // Make the button trigger dragging of the hidden palette node
        // Attach this event handler *after* the button has been potentially inserted into the DOM
        // We attach it to the *list item* which is guaranteed to exist
        unitNodeButtonLi.find("#red-ui-header-button-unit-node").mousedown(function(e) {
            // Prevent default behavior and text selection
            e.preventDefault();
            
            // Position the node under the cursor
            unitNodeDrag.css({
                'top': mousePos.y - 15,
                'left': mousePos.x - 50,
                'display': 'block'
            });
            
            // Trigger mousedown on the drag node
            unitNodeDrag.trigger(e);
            
            // Add a handler to hide the drag node after the drag is complete
            $(document).one('mouseup', function() {
                setTimeout(function() {
                    unitNodeDrag.css('display', 'none');
                }, 300);
            });
            
            // This is important - stop event propagation
            return false;
        });
        
        // Click handler to show help
        // Attach this event handler *after* the button has been potentially inserted into the DOM
        unitNodeButtonLi.find('#red-ui-header-button-unit-node').on("click", function(event) {
            // This is now handled by the mousedown event
            event.preventDefault();
            RED.sidebar.help.show("unit-node");
        });
    }
    
    return {
        init: init
    };
})(); 