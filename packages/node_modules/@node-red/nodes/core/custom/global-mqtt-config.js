module.exports = function(RED) {
    "use strict";
    console.log("Loading global-mqtt-config.js");

    // Initialize settings if they don't exist
    RED.settings.globalMqttConfig = RED.settings.globalMqttConfig || {
        broker: "localhost",
        port: "1883"
    };

    // Create an event handler for MQTT config changes
    RED.events.on("global-mqtt-config-update", function(config) {
        try {
            console.log("Received MQTT config update:", config);
            // Update the runtime settings
            RED.settings.globalMqttConfig = config;
            
            // Notify all unit-nodes of the configuration change
            RED.nodes.eachNode(function(node) {
                if (node.type === "unit-node") {
                    try {
                        const actualNode = RED.nodes.getNode(node.id);
                        if (actualNode && actualNode.globalMqttConfigListener) {
                            actualNode.globalMqttConfigListener(config);
                        }
                    } catch (emitErr) {
                        console.error("Error notifying node of MQTT config update:", emitErr);
                    }
                }
            });
        } catch (err) {
            console.error("Error handling MQTT config update:", err);
        }
    });

    // Log that the module has been loaded
    console.log("Global MQTT config module loaded successfully with config:", RED.settings.globalMqttConfig);
} 